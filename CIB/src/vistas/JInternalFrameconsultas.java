/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import CIB.Conexion;
import Op.consultaOp;
import Op.programasOp;
import Op.registroOp;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Julian C Vargas Q
 */
public class JInternalFrameconsultas extends javax.swing.JInternalFrame {

     Conexion mysql = new Conexion();
    Connection cn = mysql.getconexion();

    String sSQL = "";
    Statement st;
    ResultSet rs;
    DefaultTableModel modelo;

    int idbanco;

    registroOp r = new registroOp();
    consultaOp c = new consultaOp();

    //variables para prueba de generar tabla
    String idprog[];
    int idfacult[];
    String facultades[];
    String programas[];
    Workbook wb;
    Cell celda;
    int subirRow = 1;
    Sheet hoja;
    Row fila;
    int subtotal;
    int grantotal;
    int numhoja = 1;
    int jtableidf;
    JFileChooser selecArchivo;
    File archivo;
    File ext;

    String nomb_hoja;
    
    /**
     * Creates new form JInternalFrameconsultas
     */
    public JInternalFrameconsultas() {
        initComponents();
        cargarcbo();
        cargarbancos();
    }

    
     public void cargarcbo(){
            
        this.jComboBoxfacultad.removeAllItems();
            
            
            try {

            st = cn.createStatement();
            rs = st.executeQuery("select * from facultad");
            jComboBoxfacultad.addItem("");
            while (rs.next()) {
                this.jComboBoxfacultad.addItem(rs.getString("nombfacultad"));
            }

        } catch (Exception e) {

        }
            
    }
     
     
    public void cargarbancos() {

        this.cbobancoc.removeAllItems();

        try {

            st = cn.createStatement();
            rs = st.executeQuery("select * from banco");
            cbobancoc.addItem("");
            while (rs.next()) {
                this.cbobancoc.addItem(rs.getString("nombrebanco"));
            }

        } catch (Exception e) {

        }

    }

    public String retornarString(Calendar fecha) {
        //Método que retorna un String de fecha pasándole como argumento un objeto Calendar.
        String retorno = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        if (fecha != null) {
            retorno = sdf.format(fecha.getTime());
        }
        return retorno;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        f1 = new com.toedter.calendar.JDateChooser();
        f2 = new com.toedter.calendar.JDateChooser();
        jComboBoxfacultad = new javax.swing.JComboBox<>();
        cbobancoc = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxxlsx = new javax.swing.JCheckBox();
        jCheckBoxxls = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableorganizar = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(f1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 160, -1));
        getContentPane().add(f2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 160, -1));

        jComboBoxfacultad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxfacultad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxfacultadActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxfacultad, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 210, 30));

        cbobancoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cbobancoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 190, 30));

        jLabel4.setFont(new java.awt.Font("Bookman Old Style", 3, 16)); // NOI18N
        jLabel4.setText("Facultad");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, -1));

        jButton2.setFont(new java.awt.Font("Bookman Old Style", 3, 16)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/xlsx.png"))); // NOI18N
        jButton2.setText("Exportar Informe");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, -1, 70));

        jButton1.setFont(new java.awt.Font("Bookman Old Style", 3, 12)); // NOI18N
        jButton1.setText("Eliminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 40, 110, 30));

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 3, 16)); // NOI18N
        jLabel1.setText("Banco:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 3, 16)); // NOI18N
        jLabel2.setText("Fecha Inicial");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 3, 16)); // NOI18N
        jLabel3.setText("Fecha Final");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jCheckBoxxlsx.setText(".XLSX");
        jCheckBoxxlsx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxxlsxStateChanged(evt);
            }
        });
        jCheckBoxxlsx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxxlsxActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxxlsx, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        jCheckBoxxls.setText(".XLS");
        jCheckBoxxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxxlsActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxxls, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, -1, -1));

        jTableorganizar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FACULTAD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableorganizar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 330, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxfacultadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxfacultadActionPerformed
        try {
            if(jComboBoxfacultad.getSelectedIndex()!=0){
                programasOp p = new programasOp();
                jtableidf = p.idfacultad(jComboBoxfacultad.getSelectedItem().toString());
                String nombref = jComboBoxfacultad.getSelectedItem().toString();

                modelo = (DefaultTableModel) jTableorganizar.getModel();

                modelo.addRow(new Object[]{jtableidf,nombref});

            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jComboBoxfacultadActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        idbanco = r.idbanco(cbobancoc.getSelectedItem().toString());
        String fecha1 = retornarString(f1.getCalendar());
        String fecha2 = retornarString(f2.getCalendar());

        if (fecha1 != null && fecha2 != null && ext != null) {
            selecArchivo = new JFileChooser();
            selecArchivo.addChoosableFileFilter(new FileNameExtensionFilter(".xlsx", "xlsx"));
            selecArchivo.addChoosableFileFilter(new FileNameExtensionFilter(".xls", "xls"));
            selecArchivo.setAcceptAllFileFilterUsed(true);

            if (selecArchivo.showDialog(null, "Exportar") == JFileChooser.APPROVE_OPTION) {
                archivo = selecArchivo.getSelectedFile();

                if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                    nomb_hoja = JOptionPane.showInputDialog("Ingrese el nombre de la hoja");
                    // JOptionPane.showMessageDialog(null, Exportar(archivo, nomb_hoja));
                    prueballenar(fecha1, fecha2);
                    try {

                        // modelo = c.cargarReporte(idbanco, fecha1, fecha2,archivo,nomb_hoja);
                        // jTable1.setModel(modelo);
                        //jTable1.setValueAt(c.subtotal, c.columna, 4);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "ERROR  " + e);
                    }

                } else {
                    String archivo2 = "" + archivo + "" + ext;
                    archivo = new File(archivo2);
                    if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                        nomb_hoja = JOptionPane.showInputDialog("Ingrese el nombre de la hoja");
                        prueballenar(fecha1, fecha2);
                    } else {
                        JOptionPane.showMessageDialog(null, "Elija el formato para guardar el archivo");
                    }

                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione la informacion necesaria para el informe");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int row = jTableorganizar.getSelectedRow();
        modelo = (DefaultTableModel) jTableorganizar.getModel();
        if(row !=-1){
            modelo.removeRow(row);
        }else{
            JOptionPane.showMessageDialog(null, "seleccione una fila");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBoxxlsxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxxlsxStateChanged

    }//GEN-LAST:event_jCheckBoxxlsxStateChanged

    private void jCheckBoxxlsxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxxlsxActionPerformed
        if (jCheckBoxxlsx.isSelected()) {
            jCheckBoxxls.setEnabled(false);
            ext = new File(".xlsx");
        } else {
            jCheckBoxxls.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxxlsxActionPerformed

    private void jCheckBoxxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxxlsActionPerformed
        if (jCheckBoxxls.isSelected()) {
            jCheckBoxxlsx.setEnabled(false);
            ext = new File(".xls");
        } else {
            jCheckBoxxlsx.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxxlsActionPerformed

    
    public void prueballenar(String f1, String f2) {

        fila = null;

        if (archivo.getName().endsWith("xls")) {
            System.out.println("el archivo tine extension xls");
            if (!archivo.exists() && archivo.getName().endsWith("xls") || archivo.getName().endsWith("xls")) {
                System.out.println("condicion no existe");
                wb = new HSSFWorkbook();
            } else if (archivo.exists() && archivo.getName().endsWith("xls")) {
                // WorkbookFactory.create(new FileInputStream(archivo));
                try {
                    wb = WorkbookFactory.create(new FileInputStream(archivo));
                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "La extension del archivo no es valida");
            }
        } else {
            System.out.println("el archivo tiene extension xlsx");
            if (!archivo.exists() && archivo.getName().endsWith("xlsx")) {
                System.out.println("condicion no existe");
                wb = new XSSFWorkbook();
            } else if (archivo.exists() && archivo.getName().endsWith("xlsx")) {
                try {
                    wb = WorkbookFactory.create(new FileInputStream(archivo));
                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "La extension del archivo no es valida");
            }

        }

        if (nomb_hoja.equals("")) {
            hoja = wb.createSheet();
        } else {
            hoja = wb.createSheet(nomb_hoja);
        }
        
       
        if(jTableorganizar.getRowCount()!=0){
            System.out.println("condicion1");
             buscarfacultades2();
        }else{
             System.out.println("condicion2");
            buscarfacultades();
        }
       
        int idf;
        for (int i = 0; i < idfacult.length; i++) {
            
            generarfilas();
            celda = fila.createCell(0);
            celda.setCellStyle(bordegrueso());
            celda.setCellValue(facultades[i]);
            idf = idfacult[i];
            idprogramas(idf);
            generarfilas();

            for (int p = 0; p < idprog.length; p++) {
                String id = idprog[p];
                celda = fila.createCell(0);
                celda.setCellStyle(bordedelgado());
                celda.setCellValue(id+"  "+programas[p]);
              //  celda = fila.createCell(1);
              // celda.setCellValue(programas[p]);
                try {
                    if (idbanco == 0) {
                        sSQL = "select facult.nombfacultad, p.idprograma, p.nombreprograma, sum(r.valor) as subtotal "
                                + "from registro r  inner join fecha f on r.idfecha=f.idfecha inner join programa p "
                                + " on r.idprograma= p.idprograma inner join facultad facult on p.idfacultad = facult.idfacultad where p.idfacultad = "
                                + idf + " and p.idprograma ='" + idprog[p] + "'  "
                                + " and f.fecha  between '" + f1 + "' and '" + f2 + "'";

                    } else {
                        sSQL = "select sum(r.valor) as valor from registro r  inner join fecha f on r.idfecha=f.idfecha"
                                + " inner join programa p on r.idprograma = p.idprograma inner join facultad facult on "
                                + "p.idfacultad = facult.idfacultad where  f.idbanco = " + idbanco + " and p.idfacultad = "
                                + idf + " and p.idprograma ='" + idprog[p] + "'  and f.fecha  between '" + f1 + "' and '" + f2 + "'";

                    }

                    st = cn.createStatement();
                    rs = st.executeQuery(sSQL);

                    while (rs.next()) {
                        celda = fila.createCell(1);
                        celda.setCellStyle(bordedelgado());
                        celda.setCellValue(rs.getString("valor"));
                        subtotal = subtotal + Integer.parseInt(rs.getString("valor"));

                        generarfilas();
                    }

                } catch (Exception e) {
                    generarfilas();
                }

            }
            grantotal = grantotal + subtotal;
            celda = fila.createCell(0);
            celda.setCellValue("TOTAL");
            celda = fila.createCell(1);
            celda.setCellStyle(bordedelgado());
            celda.setCellValue(subtotal);
            subtotal = 0;

            generarfilas();

        }
        generarfilas();
        celda = fila.createCell(0);
        celda.setCellStyle(bordegrueso());
        celda.setCellValue("GRAN TOTAL");
        celda = fila.createCell(1);
        celda.setCellStyle(bordedelgado());
        celda.setCellValue(grantotal);

        try {

            wb.write(new FileOutputStream(archivo));

            JOptionPane.showMessageDialog(null, "Exportacion exitosa  \n  Ruta : " + archivo);
            wb.close();
            Desktop.getDesktop().open(archivo);
            subirRow = 1;
        } catch (Exception e) {
        }

    }

    public void generarfilas() {
        subirRow++;
        fila = hoja.createRow(subirRow);

    }

    public CellStyle bordegrueso() {

        CellStyle estilo = wb.createCellStyle();
        estilo.setBorderBottom(CellStyle.BORDER_MEDIUM);
        estilo.setBottomBorderColor((short) 8);
        estilo.setBorderLeft(CellStyle.BORDER_MEDIUM);
        estilo.setLeftBorderColor((short) 8);
        estilo.setBorderRight(CellStyle.BORDER_MEDIUM);
        estilo.setRightBorderColor((short) 8);
        estilo.setBorderTop(CellStyle.BORDER_MEDIUM);
        estilo.setTopBorderColor((short) 8);
        return estilo;
    }
    
    public CellStyle bordedelgado() {

        CellStyle estilo = wb.createCellStyle();
        estilo.setBorderBottom(CellStyle.BORDER_THIN);
        estilo.setBottomBorderColor((short) 8);
        estilo.setBorderLeft(CellStyle.BORDER_THIN);
        estilo.setLeftBorderColor((short) 8);
        estilo.setBorderRight(CellStyle.BORDER_THIN);
        estilo.setRightBorderColor((short) 8);
        estilo.setBorderTop(CellStyle.BORDER_THIN);
        estilo.setTopBorderColor((short) 8);
        return estilo;
    }

    public void buscarfacultades() {

        try {

            int i = 0;
            int cantidad = 0;

            st = cn.createStatement();
            rs = st.executeQuery("select count(idfacultad) as cantidad from facultad");
            while (rs.next()) {
                cantidad = rs.getInt("cantidad");
            }
            idfacult = new int[cantidad];
            facultades = new String[cantidad];
            st = cn.createStatement();
            rs = st.executeQuery("select idfacultad, nombfacultad from facultad");
            while (rs.next()) {
                idfacult[i] = rs.getInt("idfacultad");
                facultades[i] = rs.getString("nombfacultad");
                i++;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e);
        }

    }

    public void buscarfacultades2() {
       
        int cantidad = jTableorganizar.getRowCount();
     
        idfacult = new int[cantidad];
        facultades =  new String[cantidad]; 
        int controlador1;
             
        for(int fil = 0; fil < jTableorganizar.getRowCount(); fil++){
           
            controlador1 = 0;
         
                String id = jTableorganizar.getValueAt(fil, controlador1).toString();
                idfacult[fil] = Integer.parseInt(id);
                System.out.println("id"+idfacult[fil]);
                
                controlador1 = 1;
                String facultad = jTableorganizar.getValueAt(fil, controlador1).toString();
                facultades[fil] = facultad;
                System.out.println("facultad "+facultades[fil]);
              
            
           
        }
       
  
        

    }
    
    
    public void idprogramas(int idfacultad) {
        
        //String[] idp = null;
        int i = 0;
        int cantidad = 0;
        try {

            st = cn.createStatement();
            rs = st.executeQuery("select count(idprograma) as cantidad from programa where idfacultad = " +idfacultad+"");
            while (rs.next()) {
                cantidad = rs.getInt("cantidad");
            }
            idprog = new String[cantidad];
            programas = new String[cantidad];
            st = cn.createStatement();
            rs = st.executeQuery("select idprograma, nombreprograma from programa where idfacultad =" +idfacultad + "  order "
                    + "by idfacultad");
            while (rs.next()) {
                idprog[i] = rs.getString("idprograma");
                programas[i] = rs.getString("nombreprograma");
                i++;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbobancoc;
    private com.toedter.calendar.JDateChooser f1;
    private com.toedter.calendar.JDateChooser f2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBoxxls;
    private javax.swing.JCheckBox jCheckBoxxlsx;
    private javax.swing.JComboBox<String> jComboBoxfacultad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableorganizar;
    // End of variables declaration//GEN-END:variables
}
